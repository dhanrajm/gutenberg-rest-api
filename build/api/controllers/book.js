import BookModel from "../models/book";
function parseQueryParams(query) {
    const params = {
        skip: 0,
        pageSize: 25,
        id: null,
        title: null,
        author: null,
        lang: null,
        topic: null,
        mimeType: null,
    };
    for (const key of Object.keys(query)) {
        switch (key) {
            case "skip":
            case "pageSize":
                params[key] = query[key];
                break;
            case "id":
            case "title":
            case "author":
            case "lang":
            case "topic":
                params[key] = query[key] || null;
                break;
            case "mime-type":
                params["mimeType"] = query[key] || null;
                break;
            default:
                break;
        }
    }
    return params;
}
async function list(req, res, _next) {
    console.log(req.query);
    const model = new BookModel();
    const params = parseQueryParams(req.query);
    const result = await model.getMany(params);
    res.send(result);
}
export default {
    list,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvY29udHJvbGxlcnMvYm9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLFNBQVMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2QyxTQUFTLGdCQUFnQixDQUFDLEtBQXFCO0lBQzdDLE1BQU0sTUFBTSxHQUFzQjtRQUNoQyxJQUFJLEVBQUUsQ0FBQztRQUNQLFFBQVEsRUFBRSxFQUFFO1FBQ1osRUFBRSxFQUFFLElBQUk7UUFDUixLQUFLLEVBQUUsSUFBSTtRQUNYLE1BQU0sRUFBRSxJQUFJO1FBQ1osSUFBSSxFQUFFLElBQUk7UUFDVixLQUFLLEVBQUUsSUFBSTtRQUNYLFFBQVEsRUFBRSxJQUFJO0tBQ2YsQ0FBQztJQUNGLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNwQyxRQUFRLEdBQUcsRUFBRTtZQUNYLEtBQUssTUFBTSxDQUFDO1lBQ1osS0FBSyxVQUFVO2dCQUNiLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFzQixDQUFDO2dCQUM5QyxNQUFNO1lBQ1IsS0FBSyxJQUFJLENBQUM7WUFDVixLQUFLLE9BQU8sQ0FBQztZQUNiLEtBQUssUUFBUSxDQUFDO1lBQ2QsS0FBSyxNQUFNLENBQUM7WUFDWixLQUFLLE9BQU87Z0JBQ1YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUM7Z0JBQ2pDLE1BQU07WUFDUixLQUFLLFdBQVc7Z0JBQ2QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUM7Z0JBQ3hDLE1BQU07WUFDUjtnQkFDRSxNQUFNO1NBQ1Q7S0FDRjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFDRCxLQUFLLFVBQVUsSUFBSSxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsS0FBbUI7SUFDbEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsTUFBTSxLQUFLLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztJQUU5QixNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsS0FBdUIsQ0FBQyxDQUFDO0lBQzdELE1BQU0sTUFBTSxHQUFHLE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUUzQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25CLENBQUM7QUFFRCxlQUFlO0lBQ2IsSUFBSTtDQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSBcImV4cHJlc3NcIjtcclxuaW1wb3J0IHsgUGFyc2VkVXJsUXVlcnkgfSBmcm9tIFwicXVlcnlzdHJpbmdcIjtcclxuaW1wb3J0IHsgRGJCb29rUXVlcnlQYXJhbXMgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcclxuaW1wb3J0IEJvb2tNb2RlbCBmcm9tIFwiLi4vbW9kZWxzL2Jvb2tcIjtcclxuXHJcbmZ1bmN0aW9uIHBhcnNlUXVlcnlQYXJhbXMocXVlcnk6IFBhcnNlZFVybFF1ZXJ5KSB7XHJcbiAgY29uc3QgcGFyYW1zOiBEYkJvb2tRdWVyeVBhcmFtcyA9IHtcclxuICAgIHNraXA6IDAsXHJcbiAgICBwYWdlU2l6ZTogMjUsXHJcbiAgICBpZDogbnVsbCxcclxuICAgIHRpdGxlOiBudWxsLFxyXG4gICAgYXV0aG9yOiBudWxsLFxyXG4gICAgbGFuZzogbnVsbCxcclxuICAgIHRvcGljOiBudWxsLFxyXG4gICAgbWltZVR5cGU6IG51bGwsXHJcbiAgfTtcclxuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhxdWVyeSkpIHtcclxuICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgIGNhc2UgXCJza2lwXCI6XHJcbiAgICAgIGNhc2UgXCJwYWdlU2l6ZVwiOlxyXG4gICAgICAgIHBhcmFtc1trZXldID0gcXVlcnlba2V5XSBhcyB1bmtub3duIGFzIG51bWJlcjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBcImlkXCI6XHJcbiAgICAgIGNhc2UgXCJ0aXRsZVwiOlxyXG4gICAgICBjYXNlIFwiYXV0aG9yXCI6XHJcbiAgICAgIGNhc2UgXCJsYW5nXCI6XHJcbiAgICAgIGNhc2UgXCJ0b3BpY1wiOlxyXG4gICAgICAgIHBhcmFtc1trZXldID0gcXVlcnlba2V5XSB8fCBudWxsO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwibWltZS10eXBlXCI6XHJcbiAgICAgICAgcGFyYW1zW1wibWltZVR5cGVcIl0gPSBxdWVyeVtrZXldIHx8IG51bGw7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcGFyYW1zO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGxpc3QocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBfbmV4dDogTmV4dEZ1bmN0aW9uKSB7XHJcbiAgY29uc29sZS5sb2cocmVxLnF1ZXJ5KTtcclxuICBjb25zdCBtb2RlbCA9IG5ldyBCb29rTW9kZWwoKTtcclxuXHJcbiAgY29uc3QgcGFyYW1zID0gcGFyc2VRdWVyeVBhcmFtcyhyZXEucXVlcnkgYXMgUGFyc2VkVXJsUXVlcnkpO1xyXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1vZGVsLmdldE1hbnkocGFyYW1zKTtcclxuXHJcbiAgcmVzLnNlbmQocmVzdWx0KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGxpc3QsXHJcbn07XHJcbiJdfQ==